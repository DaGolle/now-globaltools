<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <copied_from/>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <mugshots_cache_json/>
        <notes/>
        <order>1</order>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-09-30 06:33:46</sys_created_on>
        <sys_id>74cabd161b25b510d5be777d8b4bcbb3</sys_id>
        <sys_mod_count>105</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_atf_step_74cabd161b25b510d5be777d8b4bcbb3</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2023-10-30 18:55:34</sys_updated_on>
        <table/>
        <test display_value="GlobalToolsRecordWriteValidate Tests">a44784251b6db110d5be777d8b4bcb92</test>
        <timeout/>
        <warning_message/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=74cabd161b25b510d5be777d8b4bcbb3"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>74cabd161b25b510d5be777d8b4bcbb3</document_key>
        <order>200</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-09-30 06:33:46</sys_created_on>
        <sys_id>56dabd161b25b510d5be777d8b4bcb3a</sys_id>
        <sys_mod_count>105</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2023-10-30 18:55:34</sys_updated_on>
        <value>(function (outputs, steps, params, stepResult, assertEqual) {&#13;
&#13;
	var bLog = false;&#13;
	var _gtWriteValidate = new global.GlobalToolsRecordWriteValidate();&#13;
	var _gt = new global.GlobalTools();&#13;
	var _gtArray = new global.GlobalToolsArray();&#13;
	var _gtObject = new global.GlobalToolsObject();&#13;
&#13;
	var _gtATF = new global.GlobalToolsATF('GlobalToolsRecordWriteValidate', _gtWriteValidate, bLog, outputs, steps, params, stepResult, assertEqual);&#13;
	var grRecord;&#13;
&#13;
	var oRecordConfig = {};&#13;
	var oRecordValues = {};&#13;
	var oError = {};&#13;
	var oIREPayloadExpected = {&#13;
		'items': [{&#13;
			'internal_id': '',&#13;
			'lookup': [],&#13;
			'values': {}&#13;
		}]&#13;
	};&#13;
	var aErrorArray = [];&#13;
	var aFunctions = ['validateAndWrite', 'validateAndReturnIREObject'];&#13;
	var oExpectedResult = {};&#13;
&#13;
	/***********************************************************************************************************&#13;
	*	Fatal Errors&#13;
	************************************************************************************************************/&#13;
	/*&#13;
	aFunctions.forEach(function (sFunction) {&#13;
&#13;
		oRecordConfig = {};&#13;
		oRecordValues = {};&#13;
		oExpectedResult = (sFunction == 'validateAndWrite') ? '-1' : undefined;&#13;
&#13;
		// 405_001 Missing record config object or sTargetTable property&#13;
		oError = {};&#13;
		_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
		if ((!_gtArray.isValidArray(aErrorArray)) || (_gtObject.getValue('sCode', '', aErrorArray[0]) != '405_001')) {&#13;
			_gtATF.addError(sFunction, 'Did not return error "405_001 - Missing or empty configuration object or target table".');&#13;
		} // if error&#13;
&#13;
		// 400_001 Missing or empty record values object&#13;
		oRecordConfig['sTargetTable'] = 'incident';&#13;
		oError = {};&#13;
		_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
		if((!_gtArray.isValidArray(aErrorArray)) || (_gtObject.getValue('sCode', '', aErrorArray[0]) != '400_001')) {&#13;
			_gtATF.addError(sFunction, 'Did not return error "400_001 - Missing or empty record values object".');&#13;
		} // if error&#13;
&#13;
		// 400_033 Invalid key configuration in config object&#13;
		oRecordValues['active'] = 'true';&#13;
		oError = {};&#13;
		_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
		if((!_gtArray.isValidArray(aErrorArray)) || (_gtObject.getValue('sCode', '', aErrorArray[0]) != '400_033')) {&#13;
			_gtATF.addError(sFunction, 'Did not return error "400_033 - Invalid key configuration in config object".');&#13;
		} // if error&#13;
&#13;
		// 405_003 Invalid action: empty&#13;
		oRecordValues['sys_id'] = '-1';&#13;
		oError = {};&#13;
		_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
		if((!_gtArray.isValidArray(aErrorArray)) || (_gtObject.getValue('sCode', '', aErrorArray[0]) != '405_003')) {&#13;
			_gtATF.addError(sFunction, 'Did not return error "405_003 - Invalid action: empty".');&#13;
		} // if error&#13;
&#13;
		// 404_001 Invalid action: record delete&#13;
		oRecordConfig['bDelete'] = true;&#13;
		oError = {};&#13;
		_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
		if((!_gtArray.isValidArray(aErrorArray)) || (_gtObject.getValue('sCode', '', aErrorArray[0]) != '404_001')) {&#13;
			_gtATF.addError(sFunction, 'Did not return error "404_001 -Invalid action: record delete".');&#13;
		} // if error&#13;
&#13;
		// 405_002 Invalid action: conflict&#13;
		oRecordConfig['bUpdate'] = true;&#13;
		oError = {};&#13;
		_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
		if((!_gtArray.isValidArray(aErrorArray)) || (_gtObject.getValue('sCode', '', aErrorArray[0]) != '405_002')) {&#13;
			_gtATF.addError(sFunction, 'Did not return error "405_002 -Invalid action: conflict".');&#13;
		} // if error&#13;
&#13;
		// 404_003 Invalid action: record update&#13;
		oRecordConfig['bDelete'] = false;&#13;
		oError = {};&#13;
		_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
		if((!_gtArray.isValidArray(aErrorArray)) || (_gtObject.getValue('sCode', '', aErrorArray[0]) != '404_003')) {&#13;
			_gtATF.addError(sFunction, 'Did not return error "404_003 Invalid action: record update".');&#13;
		} // if error&#13;
&#13;
		// 404_002 Invalid action: record insert&#13;
		grRecord = _gtATF.getRecord('incident', 'active=true');&#13;
		oRecordValues['sys_id'] = grRecord.getUniqueValue();&#13;
		oRecordConfig['bDelete'] = false;&#13;
		oRecordConfig['bUpdate'] = false;&#13;
		oRecordConfig['bInsert'] = true;&#13;
		oError = {};&#13;
		_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
		if((!_gtArray.isValidArray(aErrorArray)) || (_gtObject.getValue('sCode', '', aErrorArray[0]) != '404_002')) {&#13;
			_gtATF.addError(sFunction, 'Did not return error "404_002 Invalid action: record insert".');&#13;
		} // if error&#13;
&#13;
	}, this); // each function&#13;
&#13;
	*/&#13;
&#13;
	//500_003 Error inserting record&#13;
	//500_004 Error updating record&#13;
	//500_005 Error deleting record&#13;
&#13;
	/***********************************************************************************************************&#13;
	*	Validation Errors&#13;
	************************************************************************************************************/&#13;
&#13;
	/*&#13;
	oRecordConfig = {&#13;
		'sTargetTable': 'sys_user',&#13;
		'sAction': 'insert',&#13;
		'aMandatoryFields': ['user_name', 'sugus10'],&#13;
		'sErrorReturnType': 'code',&#13;
		'sTemplateName': 'sugus11',&#13;
		'bTemplateIsMandatory': true,&#13;
		'aFields': ['sugus12', { 'aKeys': ['name'] }, 1],&#13;
		'sImpersonateDefaultUser': 'sugus14',&#13;
		'bImpersonateMandatory': true,&#13;
		'bErrorOnAddlFieldsInValues': true,&#13;
		'aUpdateBusinessLogicChecks': [{'sBeforeQuery': 'active=true'}],&#13;
	}; // config&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		'active': 'sugus0',&#13;
		'last_login': 'sugus1',&#13;
		'last_login_time': 'sugus2',&#13;
		'failed_attempts': 'sugus3',&#13;
		'latitude': 'sugus4',&#13;
		'email': 'sugus5',&#13;
		'phone': 'sugus6',&#13;
		'company': 'sugus7',&#13;
		'agent_status': 'sugus8',&#13;
		'notification': 'sugus9',&#13;
		'sugus13': 'sugus13'&#13;
	}; // values&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	var aErrorsExpected = ['400_005', '400_010', '400_011', '400_021', '400_024', '400_023', '400_026', '400_027', '400_028', '400_029', '400_015', '400_019', '400_019', '400_002', '400_003', '400_012', '400_013', '400_031', '403_001', '403_002', '400_032', '500_002'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		var oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
&#13;
	grUser = _gtATF.getRecord('sys_user', 'user_name=abel.tuter');&#13;
&#13;
	oRecordConfig = {&#13;
		'sTargetTable': 'sys_user',&#13;
		'sAction': 'insert',&#13;
		'aMandatoryFields': ['user_name'],&#13;
		'sErrorReturnType': 'code',&#13;
		'aFields': [{'sField': 'manager', 'aKeys': ['user_name']}],&#13;
		'sImpersonateDefaultUser': grUser.getUniqueValue(),&#13;
		'bImpersonateMandatory': true,&#13;
	}; // config&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		'active': 'true',&#13;
		'last_login': '2023-12-31',&#13;
		'last_login_time': '31.12.2022 17:00',&#13;
		'failed_attempts': '10',&#13;
		'latitude': '1.0123',&#13;
		'email': 'tom@hauri.biz',&#13;
		'phone': '+41787979787',&#13;
		'company': '93d4ecfac0a8000b6294d71b733977fb', // ServiceNow&#13;
		'manager': grUser.getValue('user_name'),&#13;
		'agent_status': 'on_shift',&#13;
		'notification': 1&#13;
	};&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	aErrorsExpected = ['400_005'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
&#13;
	oRecordConfig = {&#13;
		'sTargetTable': 'sys_holiday',&#13;
		'aMandatoryFields': ['name'],&#13;
		'sErrorReturnType': 'code',&#13;
		'sAction': 'insert',&#13;
	}; // config&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		'start_time1': 'sugus0',&#13;
	}; // values&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	aErrorsExpected = ['400_005', '400_025'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		'start_time1': '22:59:59',&#13;
	}; // values&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	aErrorsExpected = ['400_005'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
&#13;
	oRecordConfig = {&#13;
		'sTargetTable': 'cmdb_ci_server',&#13;
		'aMandatoryFields': ['name'],&#13;
		//'sErrorReturnType': 'code',&#13;
		'sAction': 'insert',&#13;
	}; // config&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		'ip_address': 'sugus0',&#13;
		'vendor': '86837a386f0331003b3c498f5d3ee4ca', // Boxeo is not a vendor&#13;
	}; // values&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	aErrorsExpected = ['400_005', '400_030', '400_017'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		'ip_address': '192.168.0.1',&#13;
		'vendor': '93d4ecfac0a8000b6294d71b733977fb', // ServiceNow is a vendor&#13;
	}; // values&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	aErrorsExpected = ['400_005'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
	&#13;
	oRecordConfig = {&#13;
		'sTargetTable': 'incident',&#13;
		'aMandatoryFields': ['number'],&#13;
		'sErrorReturnType': 'code',&#13;
		'sAction': 'insert',&#13;
		'aFields': [{'sField': 'assignment_group', 'aKeys': ['name']}, {'sField': 'assigned_to', 'aKeys': ['user_name']}],&#13;
	}; // config&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		'origin_id': 'sugus0',&#13;
		'origin_table': 'sugus1',&#13;
		'calendar_duration': 'sugus2',&#13;
		'assignment_group': 'Hardware',&#13;
		'assigned_to': 'bud.richman'&#13;
	}; // values&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	aErrorsExpected = ['400_005', '400_004', '400_020', '400_035', '400_036', '400_034'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
&#13;
	grRecord = _gtATF.getRecord('incident', 'active=true');&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		'origin_id': grRecord.getUniqueValue(),&#13;
		'origin_table': 'incident',&#13;
		'calendar_duration': '1 23:59:59',&#13;
		'assignment_group': 'Hardware',&#13;
		'assigned_to': 'beth.anglin',&#13;
		'close_code': 'Duplicate',&#13;
		'close_notes': 'sugus6',&#13;
	}; // values&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	aErrorsExpected = ['400_005'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
&#13;
	oRecordConfig = {&#13;
		'sTargetTable': 'cert_instance',&#13;
		'aMandatoryFields': ['number'],&#13;
		'sErrorReturnType': 'code',&#13;
		'sAction': 'insert',&#13;
	}; // config&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		'fields': 'sugus0',&#13;
	}; // values&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	aErrorsExpected = ['400_005', '400_022'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		'fields': ['sugus0'],&#13;
	}; // values&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	aErrorsExpected = ['400_005'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
&#13;
	*/&#13;
&#13;
	/* TODO TESTS:&#13;
		- sRefLookupScript&#13;
		- oTransformConfig/oFieldMap&#13;
		- oTransformConfig/oTypeMap&#13;
		- aUpdateBusinessLogicChecks / sBeforeQuery / sAfterQuery / sErrorMsg&#13;
		- aKeysDefaultReferenceFields&#13;
		- bKeysDefaultReferenceDisplayField&#13;
		- bKeepSysId&#13;
&#13;
	oActions: (Optional), object with state flow actions:&#13;
		{&#13;
		bActionIsMandatory: (Optional) Default: false, if true, either sStateAction or sStateActionId must be valid (lookup of the sActionValueField must have a valid sStateFlowAction in the values object provided).&#13;
		sActionValueField: (Optional) Default: "action", if set uses this field to retrieve the sStateFlowAction name from the values object.&#13;
		bActionDeleteFieldValue: (Optional) Default: false, if true will remove the action field from the payload before running throught the values.&#13;
		&#13;
		sStateFlowAction: Name of the state flow action:&#13;
		{&#13;
				sStateAction: &#13;
				sStateActionId: SysId of the state flow action.&#13;
				bWorkNotesMandatory: if this action, worknotes are mandatory.&#13;
		}&#13;
	}&#13;
&#13;
		bUseGlideRecordSecure&#13;
		&#13;
&#13;
	*/&#13;
&#13;
&#13;
&#13;
	oRecordConfig = {&#13;
		'sTargetTable': 'incident',&#13;
		'aMandatoryFields': ['number'],&#13;
		//'sErrorReturnType': 'code',&#13;
		'sAction': 'insert',&#13;
		//'aFields': [{'sField': 'assignment_group', 'aKeys': ['name']}, {'sField': 'assigned_to', 'aKeys': ['user_name']}],&#13;
	}; // config&#13;
&#13;
	oRecordValues = {&#13;
		'sys_id': '-1',&#13;
		&#13;
	}; // values&#13;
&#13;
	oError = {};&#13;
	_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
	aErrorArray = _gtObject.getValue('default/aErrorMessages', '', oError);&#13;
	aErrorsExpected = ['400_005', '400_004', '400_020', '400_035', '400_036', '400_034'];&#13;
	if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
		oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
		_gtATF.addError('validateAndWrite', 'Did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
	} // if same error&#13;
&#13;
	&#13;
	gs.info('tomtom validateAndWrite oError: ' + JSON.stringify(oError));&#13;
	&#13;
	return _gtATF.endATF();&#13;
&#13;
})(outputs, steps, params, stepResult, assertEqual);&#13;
</value>
        <variable display_value="Test script">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>74cabd161b25b510d5be777d8b4bcbb3</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-09-30 06:33:46</sys_created_on>
        <sys_id>92dabd161b25b510d5be777d8b4bcb3a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2023-09-30 06:33:46</sys_updated_on>
        <value>3.1</value>
        <variable display_value="Jasmine version">42f2564b73031300440211d8faf6a777</variable>
    </sys_variable_value>
</record_update>
