<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.GlobalToolsTable</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Tools to support (scoped) app development&#13;
Functions are only available for global scope and specific scopes defined in the system properties "now.globaltools.access_from_scope" or "now.globaltools.access_from_scope_custom" for security reasons.</description>
        <name>GlobalToolsTable</name>
        <script><![CDATA[var GlobalToolsTable = Class.create();
GlobalToolsTable.prototype = {
	initialize: function () {
		gs.include('j2js');
		this._unique = new GlobalToolsArray().unique;
		this._gt = new GlobalTools();
	}, // function initialize

	checkAccess: function () {
		var sCallerScope = gs.getCallerScopeName();
		var aScopes = String(gs.getProperty('now.globaltools.access_from_scope')).split(',');
		var aCustomScopes = String(gs.getProperty('now.globaltools.access_from_scope_custom')).split(',');
		if ((sCallerScope) && ((sCallerScope == 'rhino.global') || (aScopes.indexOf(sCallerScope) != -1) || (aCustomScopes.indexOf(sCallerScope) != -1))) {
			return true;
		} // if scope is allowed
	}, // function checkAccess

	/***********************************************************************************************************
	*	Table Functions
	************************************************************************************************************/

	isValidTable: function (sTable) {
		if (!this.checkAccess()) { return; }
		if ((sTable) && (new GlideRecord(sTable).isValid())) {
			return true;
		} // if table is valid
	}, // function isValidTable

	getRecordClass: function (grRecord) {
		if (!this.checkAccess()) { return; }
		if (this._gt.getType(grRecord).indexOf('gliderecord') != -1) {
			var sClassName = grRecord.getValue('sys_class_name');
			sClassName = (sClassName) ? sClassName : grRecord.getTableName();
			if (sClassName) {
				return sClassName;
			} // if class name
		} // if valid record
	}, // function getRecordClass

	// Convenience function to get absolute base class (to avoid scope issues)
	getAbsoluteBase: function (sTable) {
		if (!this.checkAccess()) { return; }
		try {
			if (this.isValidTable(sTable)) {
				var _tableUtils = new global.TableUtils(sTable);
				return String(_tableUtils.getAbsoluteBase());
			} // if valid table
		} catch (oExeption) {
			gs.error('global.GlobalToolsTable.getAbsoluteBase Exception during function for sTable: ' + sTable + ' oExeption: ' + String(oExeption));
		} // catch errors
	}, // function getAbsoluteBase

	// Convenience function to get table hierarchy (to avoid scope issues)
	getTableHierarchy: function (sTable) {
		if (!this.checkAccess()) { return; }
		try {
			if (this.isValidTable(sTable)) {
				var _tableUtils = new global.TableUtils(sTable);
				return j2js(_tableUtils.getTables());
			} // if valid table
		} catch (oExeption) {
			gs.error('global.GlobalToolsTable.getTableHierarchy Exception during function for sTable: ' + sTable + ' oExeption: ' + String(oExeption));
		} // catch errors
	}, // function getTableHierarchy

	// Convenience function to get table extentions (to avoid scope issues)
	getTableExtensions: function (sTable, bAllExtensions) {
		if (!this.checkAccess()) { return; }
		try {
			if (this.isValidTable(sTable)) {
				var _tableUtils = new global.TableUtils(sTable);
				if (bAllExtensions) {
					return j2js(_tableUtils.getAllExtensions());
				} // if all extentions
				return j2js(_tableUtils.getTableExtensions());
			} // if valid table
		} catch (oExeption) {
			gs.error('global.GlobalToolsTable.getTableExtensions Exception during function for sTable: ' + sTable + ' oExeption: ' + String(oExeption));
		} // catch errors
	}, // function getTableExtensions

	// Get cross scope access information for a table
	getTableScopeInfo: function (sTable) {
		if (!this.checkAccess()) { return; }
		if (!this.isValidTable(sTable)) {
			return;
		} // if not valid table
		var oScopeInfo = {
			'id': '',
			'access': '',
			'read': false,
			'create': false,
			'write': false,
			'delete': false
		};
		var grTable = new GlideRecord('sys_db_object');
		if (grTable.get('name', sTable)) {
			oScopeInfo['id'] = grTable.getValue('sys_scope');
			oScopeInfo['access'] = grTable.getValue('access');
			if ((grTable.getValue('access') == 'public') || ((!grTable.getValue('access')))) {
				oScopeInfo['read'] = (grTable.getValue('read_access') == '1') ? true : false;
				oScopeInfo['create'] = (grTable.getValue('create_access') == '1') ? true : false;
				oScopeInfo['write'] = (grTable.getValue('update_access') == '1') ? true : false;
				oScopeInfo['delete'] = (grTable.getValue('delete_access') == '1') ? true : false;
			} // if public
		} // if table
		return oScopeInfo;
	}, // function getTableScopeInfo

	/***********************************************************************************************************
	*	Field Functions
	************************************************************************************************************/

	getDisplayField: function (sTable) {
		if (!this.checkAccess()) { return; }
		if (this.isValidTable(sTable)) {
			var grDictOrOverride = this.getDictOrOverrideValue(sTable, '', 'display_override', true, 'display=true');
			if (grDictOrOverride) {
				return grDictOrOverride.getValue('element');
			} // if dict or override
		}
	}, // function getDisplayField

	getFields: function (oTableOrRecord, bOmitSysId) {
		if (!this.checkAccess()) { return; }
		var sType = this._gt.getType(oTableOrRecord);
		var aResultFields = [];
		var grTable, geField;
		if ((sType == 'string') && (this.isValidTable(oTableOrRecord))) {
			grTable = new GlideRecord(oTableOrRecord);
			grTable.initialize();
		} else if (sType.indexOf('gliderecord') != -1) {
			grTable = oTableOrRecord;
		} else {
			return [];
		} // if empty or string
		var aFields = grTable.getFields();
		for (var i = 0; i < aFields.size(); i++) {
			geField = aFields.get(i);
			aResultFields.push(geField.getName());
		} // each field
		if ((aResultFields.indexOf('sys_id') == -1) && (grTable.isValidField('sys_id')) && (!bOmitSysId)) {
			aResultFields.push('sys_id');
		} // if sys id
		return aResultFields.sort();
	}, // function getFields    

	/***********************************************************************************************************
	*	Reference Field Functions
	************************************************************************************************************/

	// Get reference field name based on reference table
	getRefTable: function (sTable, sField) {
		if (!this.checkAccess()) { return; }
		if ((sTable) && (this.isValidTable(sTable)) && (sField)) {
			var aTables = this.getTableHierarchy(sTable);
			var fDict = new GlideRecord('sys_dictionary');
			fDict.addEncodedQuery('element=' + sField + '^nameIN' + aTables.join(',') + '^internal_type=reference');
			fDict.setLimit(1);
			fDict.query();
			if (fDict.next()) {
				return fDict.getValue('reference');
			} // if dict
		} else {
			gs.error('global.GlobalToolsTable.getRefTableName no table or field provided!');
		} // if table and field
	}, // function getRefTableName

	// Get reference field name based on reference table
	getRefFieldName: function (fRecord, sRefTable, bCheckRefTableHierarchy, sReturnType) {
		if (!this.checkAccess()) { return; }
		var _ArrayUtil = new global.ArrayUtil();
		var sReturnField = '';
		var aReturnFields = [];
		var sTable = (fRecord) ? fRecord.getTableName() : '';
		if ((sTable) && (this.isValidTable(sTable)) && (sRefTable)) {
			if (sTable) {
				var aTables = _ArrayUtil.convertArray(new global.TableUtils(sTable).getTables());
				var aRefTables = [sRefTable];
				if (bCheckRefTableHierarchy) {
					aRefTables = _ArrayUtil.convertArray(new global.TableUtils(sRefTable).getHierarchy());
				} // if check extended ref tables
				var fDict = new GlideRecord('sys_dictionary');
				fDict.addEncodedQuery('nameIN' + aTables.join(',') + '^internal_type=reference^referenceIN' + aRefTables.join(','));
				fDict.query();
				while ((fDict.next()) && (sReturnField == '')) {
					if (sReturnType == 'array') {
						aReturnFields.push(fDict.getValue('element'));
					} else {
						sReturnField = fDict.getValue('element');
					} // if return array
				} // while dict
			} // if tablename
		} // if record
		if (sReturnType == 'array') {
			return aReturnFields;
		} else {
			return sReturnField;
		} // if return array
	}, // function getRefFieldName

	/***********************************************************************************************************
	*	Dictionary Functions
	************************************************************************************************************/

	// Get dictionary record or value respecting overrides
	getDictOrOverrideValue: function (sTable, sField, sAttributeName, bReturnRecord, sAddlDictQuery) {
		if (!this.checkAccess()) { return; }
		var oReturnValue;
		if ((sTable) && (this.isValidTable(sTable)) && ((sField) || (sAttributeName == 'display_override'))) {
			sAddlDictQuery = (sAddlDictQuery) ? sAddlDictQuery : '';
			var sAttributeBooleanQuery = (sAttributeName != 'display_override') ? '^' + sAttributeName + '_override=true' : '^' + sAttributeName + '=true';
			var aOverrideFields = ['attributes', 'calculation', 'default_value', 'dependent', 'mandatory', 'read_only', 'reference_qual', 'display_override'];
			var grDictionary = new GlideRecord('sys_dictionary');
			var grDictOverride = new GlideRecord('sys_dictionary_override');
			var aTableHierarchy = this.getTableHierarchy(sTable);
			aTableHierarchy.some(function (sTable) {
				grDictionary = new GlideRecord('sys_dictionary');
				if (sAttributeName == 'display_override') {
					grDictionary.addEncodedQuery('name=' + sTable + '^' + sAddlDictQuery);
				} else {
					grDictionary.addEncodedQuery('name=' + sTable + '^element=' + sField + '^' + sAddlDictQuery);
				} // if display
				grDictionary.query();
				if (grDictionary.next()) {
					if (!grDictionary[sAttributeName].nil()) {
						if (bReturnRecord) {
							oReturnValue = grDictionary;
						} else {
							oReturnValue = grDictionary.getValue(sAttributeName);
						} // if return record
						return true;
					} // if attribute not nil
				} else if (aOverrideFields.indexOf(sAttributeName) != -1) {
					grDictOverride = new GlideRecord('sys_dictionary_override');
					if (sAttributeName == 'display_override') {
						grDictOverride.addEncodedQuery('name=' + sTable + sAttributeBooleanQuery);
					} else {
						grDictOverride.addEncodedQuery('name=' + sTable + '^element=' + sField + sAttributeBooleanQuery);
					} // if display
					grDictOverride.query();
					if (grDictOverride.next()) {
						if (bReturnRecord) {
							oReturnValue = grDictOverride;
						} else {
							oReturnValue = grDictOverride.getValue(sAttributeName);
						} // if return record
						return true;
					} // if dict override
				} // if dict
			}, this); // each table
		} // if tablename and fieldname
		return oReturnValue;
	}, // function getDictOrOverrideValue

	getFieldChoices: function (sTable, sField, sDependentFieldValue) {
		if (!this.checkAccess()) { return; }
		var aChoices = [],
			aDependentValues = [],
			aChoiceDisplayValues = [],
			bFound = false;
		if ((sTable) && (this.isValidTable(sTable)) && (sField)) {
			var aTableHierarchy = this.getTableHierarchy(sTable);
			var sDependentFieldValueQuery = (sDependentFieldValue) ? '^dependent_value=' + sDependentFieldValue : '';
			var grChoice = new GlideRecord('sys_choice');
			aTableHierarchy.some(function (sTable) {
				grChoice = new GlideRecord('sys_choice');
				grChoice.addEncodedQuery('name=' + sTable + '^element=' + sField + '^inactive=false^language=en' + sDependentFieldValueQuery);
				grChoice.query();
				while (grChoice.next()) {
					aChoices.push(grChoice.getValue('value'));
					aDependentValues.push(grChoice.getValue('dependent_value'));
					aChoiceDisplayValues.push(grChoice.getValue('value') + ' (' + grChoice.getValue('label') + ')');
					bFound = true;
				} // while choices
				return bFound;
			}, this); // some tables
		} // if tablename and fieldname
		return [aChoices, aDependentValues, aChoiceDisplayValues];
	}, // function getFieldChoices

	getMandatoryFields: function (sTable) {
		if (!this.checkAccess()) { return; }
		var aMandatoryFields = [];
		if (this.isValidTable(sTable)) {
			var grRecord = new GlideRecord(sTable);
			grRecord.initialize();
			var aFields = this.getFields(grRecord);
			var geElement, geElementDescriptor;
			aFields.forEach(function (sField) {
				geElement = grRecord.getElement(sField);
				geElementDescriptor = geElement.getED();
				if ((sField != 'sys_id') && (geElementDescriptor.isMandatory())) {
					aMandatoryFields.push(sField);
				} // if mandatory
			}, this); // each field
		} // if tablename and fieldname
		return this._unique(aMandatoryFields, true).sort();
	}, // function getMandatoryFields

	type: 'GlobalToolsTable',
	version: '1.0.1',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'

};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-08-18 10:03:21</sys_created_on>
        <sys_id>157e05681bb47150d5be777d8b4bcb77</sys_id>
        <sys_mod_count>73</sys_mod_count>
        <sys_name>GlobalToolsTable</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_script_include_157e05681bb47150d5be777d8b4bcb77</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2023-10-26 13:37:17</sys_updated_on>
    </sys_script_include>
</record_update>
