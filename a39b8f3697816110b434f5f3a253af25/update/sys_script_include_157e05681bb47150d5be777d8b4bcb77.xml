<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.GlobalToolsTable</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Tools to support (scoped) app development&#13;
Some functions are only available for specific scopes defined in the system properties "now.globaltools.access_from_scope" or "now.globaltools.access_from_scope_custom".</description>
        <name>GlobalToolsTable</name>
        <script><![CDATA[var GlobalToolsTable = Class.create();
GlobalToolsTable.prototype = {
    initialize: function() {},

    checkAccess: function() {
        var sCallerScope = gs.getCallerScopeName();
        var aScopes = String(gs.getProperty('now.globaltools.access_from_scope')).split(',');
        var aCustomScopes = String(gs.getProperty('now.globaltools.access_from_scope_custom')).split(',');
        if ((sCallerScope) && ((sCallerScope == 'rhino.global') || (aScopes.indexOf(sCallerScope) != -1) || (aCustomScopes.indexOf(sCallerScope) != -1))) {
            return true;
        } // if scope is allowed
    }, // function checkAccess

    // Convenience function to get absolute base class (to avoid scope issues)
    getAbsoluteBase: function(sTable) {
        try {
            var _tableUtils = new global.TableUtils(sTable);
            return String(_tableUtils.getAbsoluteBase());
        } catch (oExeption) {
            gs.error('global.GlobalToolsTable.getAbsoluteBase Exception during function for sTable: ' + sTable + ' oExeption: ' + String(oExeption));
        } // catch errors
    }, // function getAbsoluteBase

    // Convenience function to get table hierarchy (to avoid scope issues) and convert to JavaScript array (from ArrayList type)
    getTableHierarchy: function(sTable) {
        try {
            var _tableUtils = new global.TableUtils(sTable);
            return String(_tableUtils.getTables()).replace(/^\[|\s|\]$/g, '').split(',');
        } catch (oExeption) {
            gs.error('global.GlobalToolsTable.getTableHierarchy Exception during function for sTable: ' + sTable+ ' oExeption: ' + String(oExeption));
        } // catch errors
    }, // function getTableHierarchy

    // Convenience function to get table extentions (to avoid scope issues) and convert to JavaScript array (from ArrayList type)
    getTableExtensions: function(sTable, bAllExtensions) {
        try {
            var _tableUtils = new global.TableUtils(sTable);
            if (bAllExtensions) {
                return String(_tableUtils.getAllExtensions()).replace(/^\[|\s|\]$/g, '').split(',');
            } // if all extentions
            return String(_tableUtils.getTableExtensions()).replace(/^\[|\s|\]$/g, '').split(',');
        } catch (oExeption) {
            gs.error('global.GlobalToolsTable.getTableExtensions Exception during function for sTable: ' + sTable + ' oExeption: ' + String(oExeption));
        } // catch errors
    }, // function getTableExtensions

    // Get cross scope access information for a table
    getTableScopeInfo: function(sTable) {
        if (!this.checkAccess()) {
            return;
        }
        var oScopeInfo = {
            'id': '',
            'access': '',
            'read': false,
            'create': false,
            'write': false,
            'delete': false
        };
        var grTable = new GlideRecord('sys_db_object');
        if (grTable.get('name', sTable)) {
            oScopeInfo['id'] = grTable.getValue('sys_scope');
            oScopeInfo['access'] = grTable.getValue('access');
            if ((grTable.getValue('access') == 'public') || ((!grTable.getValue('access')))) {
                oScopeInfo['read'] = (grTable.getValue('read_access') == '1') ? true : false;
                oScopeInfo['create'] = (grTable.getValue('create_access') == '1') ? true : false;
                oScopeInfo['write'] = (grTable.getValue('update_access') == '1') ? true : false;
                oScopeInfo['delete'] = (grTable.getValue('delete_access') == '1') ? true : false;
            } // if public
        } // if table
        return oScopeInfo;
    }, // function getTableScopeInfo

    // Get reference field name based on reference table
    getRefTable: function(sTable, sField) {
        if (!this.checkAccess()) {
            return;
        }
        if ((sTable) && (sField)) {
            var aTables = this.getTableHierarchy(sTable);
            var fDict = new GlideRecord('sys_dictionary');
            fDict.addEncodedQuery('element=' + sField + '^nameIN' + aTables.join(',') + '^internal_type=reference');
            fDict.setLimit(1);
            fDict.query();
            if (fDict.next()) {
                return fDict.getValue('reference');
            } // if dict
        } else {
            gs.error('global.GlobalToolsTable.getRefTableName no table or field provided!');
        } // if table and field
    }, // function getRefTableName

    // Get reference field name based on reference table
    getRefFieldName: function(fRecord, sRefTable, bCheckRefTableHierarchy, sReturnType) {
        if (!this.checkAccess()) {
            return;
        }
        var _ArrayUtil = new global.ArrayUtil();
        var sReturnField = '';
        var aReturnFields = [];
        var sTable = (fRecord) ? fRecord.getTableName() : '';
        if ((sTable) && (sRefTable)) {
            if (sTable) {
                var aTables = _ArrayUtil.convertArray(new global.TableUtils(sTable).getTables());
                var aRefTables = [sRefTable];
                if (bCheckRefTableHierarchy) {
                    aRefTables = _ArrayUtil.convertArray(new global.TableUtils(sRefTable).getHierarchy());
                } // if check extended ref tables
                var fDict = new GlideRecord('sys_dictionary');
                fDict.addEncodedQuery('nameIN' + aTables.join(',') + '^internal_type=reference^referenceIN' + aRefTables.join(','));
                fDict.query();
                while ((fDict.next()) && (sReturnField == '')) {
                    if (sReturnType == 'array') {
                        aReturnFields.push(fDict.getValue('element'));
                    } else {
                        sReturnField = fDict.getValue('element');
                    } // if return array
                } // while dict
            } // if tablename
        } // if record
        if (sReturnType == 'array') {
            return aReturnFields;
        } else {
            return sReturnField;
        } // if return array
    }, // function getRefFieldName

    // Get dictionary record or value respecting overrides
    getDictOrOverrideValue: function(sTable, sField, sAttributeName, bReturnRecord, sAddlDictQuery) {
        if (!this.checkAccess()) {
            return;
        }
        var oReturnValue;
        if ((sTable) && (sField)) {
            sAddlDictQuery = (sAddlDictQuery) ? sAddlDictQuery : '';
            var sAttributeBooleanQuery = (sAttributeName != 'display_override') ? '^' + sAttributeName + '_override=true' : '';
            var aOverrideFields = ['attributes', 'calculation', 'default_value', 'dependent', 'mandatory', 'read_only', 'reference_qual', 'display_override'];
            var grDictionary = new GlideRecord('sys_dictionary');
            var grDictOverride = new GlideRecord('sys_dictionary_override');
            var aTableHierarchy = this.getTableHierarchy(sTable);
            aTableHierarchy.some(function(sTable) {
                grDictionary = new GlideRecord('sys_dictionary');
                grDictionary.addEncodedQuery('name=' + sTable + '^element=' + sField + sAddlDictQuery);
                grDictionary.query();
                if (grDictionary.next()) {
                    if (!grDictionary[sAttributeName].nil()) {
                        if (bReturnRecord) {
                            oReturnValue = grDictionary;
                        } else {
                            oReturnValue = grDictionary.getValue(sAttributeName);
                        } // if return record
                        return true;
                    } // if attribute not nil
                } else if (aOverrideFields.indexOf(sAttributeName) != -1) {
                    grDictOverride = new GlideRecord('sys_dictionary_override');
                    grDictOverride.addEncodedQuery('name=' + sTable + '^element=' + sField + sAttributeBooleanQuery);
                    grDictOverride.query();
                    if (grDictOverride.next()) {
                        if (bReturnRecord) {
                            oReturnValue = grDictOverride;
                        } else {
                            oReturnValue = grDictOverride.getValue(sAttributeName);
                        } // if return record
                        return true;
                    } // if dict override
                } // if dict
            }, this); // each table
        } // if tablename and fieldname
        return oReturnValue;
    }, // function getDictOrOverrideValue

    getFieldChoices: function(sTable, sField, sDependentFieldValue) {
        var aChoices = [],
            aDependentValues = [],
            bFound = false;
        if ((sTable) && (sField)) {
            var aTableHierarchy = this.getTableHierarchy(sTable);
            var sDependentFieldValueQuery = (sDependentFieldValue) ? '^dependent_value=' + sDependentFieldValue : '';
            var grChoice = new GlideRecord('sys_choice');
            aTableHierarchy.some(function(sTable) {
                grChoice = new GlideRecord('sys_choice');
                grChoice.addEncodedQuery('name=' + sTable + '^element=' + sField + '^inactive=false^language=en' + sDependentFieldValueQuery);
                grChoice.query();
                while (grChoice.next()) {
                    aChoices.push(grChoice.getValue('value'));
                    aDependentValues.push(grChoice.getValue('dependent_value'));
                    bFound = true;
                } // while choices
                return bFound;
            }, this); // some tables
        } // if tablename and fieldname
        return [aChoices, aDependentValues];
    }, // function getFieldChoices

    type: 'GlobalToolsTable',
    version: '1.0.0',
    author: 'Tom Hauri',
    email: 'tom@hauri.biz'

};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-08-18 10:03:21</sys_created_on>
        <sys_id>157e05681bb47150d5be777d8b4bcb77</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>GlobalToolsTable</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_script_include_157e05681bb47150d5be777d8b4bcb77</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2023-08-25 19:06:47</sys_updated_on>
    </sys_script_include>
</record_update>
