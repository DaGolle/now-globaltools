<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.GlobalToolsRecordRead</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Tools to support (scoped) app development&#13;
Functions are only available for global scope and specific scopes defined in the system properties "now.globaltools.access_from_scope" or "now.globaltools.access_from_scope_custom" for security reasons.</description>
        <name>GlobalToolsRecordRead</name>
        <script><![CDATA[var GlobalToolsRecordRead = Class.create();
GlobalToolsRecordRead.prototype = {
	initialize: function () {
		if (!this.checkAccess()) {
			return;
		}
		this._gt = new global.GlobalTools();
		this._gtObject = new global.GlobalToolsObject();
		this._getValue = this._gtObject.getValue;
		this._gtTable = new global.GlobalToolsTable();
		this._isValidArray = new global.GlobalToolsArray().isValidArray;
	}, // function initialize

	checkAccess: function () {
		var sCallerScope = gs.getCallerScopeName();
		var aScopes = String(gs.getProperty('now.globaltools.access_from_scope')).split(',');
		var aCustomScopes = String(gs.getProperty('now.globaltools.access_from_scope_custom')).split(',');
		if ((sCallerScope) && ((sCallerScope == 'rhino.global') || (aScopes.indexOf(sCallerScope) != -1) || (aCustomScopes.indexOf(sCallerScope) != -1))) {
			return true;
		} // if scope is allowed
	}, // function checkAccess

	// Convenience function to get count of records, returns number or Array in Array with value, displayvalue (optional) and count per field
	countRecords: function (sTable, sQuery, sField, bDisplayValue, bDisplayValueOnly, bQueryNoDomain) {
		if (!this.checkAccess()) { return; }
		if ((!sTable) || (!this._gtTable.isValidTable(sTable))) {
			gs.warn('GlobalToolsRecordRead.countRecords called with invalid table: ' + sTable);
			return;
		} // if no table return
		var gaRecord = new GlideAggregate(sTable);
		if (sQuery) {
			gaRecord.addEncodedQuery(sQuery);
		} // if query
		if (sField) {
			var aRow = [],
				sFieldValue = '',
				sFieldDisplayValue = '',
				iFieldCount = -1;
			var grRecord = new GlideRecord(sTable);
			if (grRecord.isValidField(sField)) {
				gaRecord.addAggregate('COUNT', sField);
				if (bQueryNoDomain) {
					gaRecord.queryNoDomain();
				} else {
					gaRecord.query();
				} // if no domain
				while (gaRecord.next()) {
					sFieldValue = gaRecord.getValue(sField);
					if ((bDisplayValue) || (bDisplayValueOnly)) {
						sFieldDisplayValue = gaRecord.getDisplayValue(sField); // perf is sometimes suboptimal
					} // if no disp is true
					iFieldCount = gaRecord.getAggregate('COUNT', sField);
					if (bDisplayValueOnly) {
						sFieldDisplayValue = (sFieldDisplayValue) ? sFieldDisplayValue : sFieldValue;
						aRow.push([sTable, sFieldDisplayValue, iFieldCount]);
					} else if (!bDisplayValue) {
						aRow.push([sTable, sFieldValue, iFieldCount]);
					} else {
						aRow.push([sTable, sFieldValue, sFieldDisplayValue, iFieldCount]);
					} // if bDisplayOnly
				} // while record
			} else {
				iFieldCount = this.countRecords(sTable, sQuery);
				if ((bDisplayValueOnly) || (!bDisplayValue)) {
					aRow.push([sTable, '', iFieldCount]);
				} else {
					aRow.push([sTable, '', '', iFieldCount]);
				} // if bDisplayOnl
			} // if field is not valid return total count with empty field/display
			return aRow;
		} else {
			gaRecord.addAggregate('COUNT');
			if (bQueryNoDomain) {
				gaRecord.queryNoDomain();
			} else {
				gaRecord.query();
			} // if no domain
			if (gaRecord.next()) {
				return gaRecord.getAggregate('COUNT');
			} else {
				return -1;
			} // if record
		} // if field
	}, // function countRecords

	// Function for scoped apps to query a gliderecord with the options
	getRecords: function (sTable, sQuery, aOrderBy, aOrderByDesc, iLimit, bWorkflow, bAutoSysFields, bQueryNoDomain) {
		if (!this.checkAccess()) { return; }
		if ((!sTable) || (!this._gtTable.isValidTable(sTable))) {
			gs.warn('GlobalToolsRecordRead.getRecords called with invalid table: ' + sTable);
			return;
		} // if no table return
		var grRecord = new GlideRecord(sTable);
		if (sQuery) {
			grRecord.addEncodedQuery(sQuery);
		} // if query
		if (aOrderBy) {
			var fnOrderBy = function (sOrderByField) {
				grRecord.orderBy(sOrderByField);
			};
			aOrderBy.forEach(fnOrderBy);
		} // if order by
		if (aOrderByDesc) {
			var fnOrderByDesc = function (sOrderByField) {
				grRecord.orderByDesc(sOrderByField);
			};
			aOrderByDesc.forEach(fnOrderByDesc);
		} // if order by
		if ((iLimit) && (!isNaN(iLimit))) {
			grRecord.setLimit(iLimit);
		} // if limit
		if (bWorkflow === false) {
			grRecord.setWorkflow(false);
		} // if workflow false
		if (bAutoSysFields === false) {
			grRecord.autoSysFields(false);
		} // if autosysfields false
		if (bQueryNoDomain === true) {
			grRecord.queryNoDomain();
		} else {
			grRecord.query();
		} // if queryno domain
		return grRecord;
	}, // function getRecords

	checkRecordByField: function (sTable, sField, sValue) {
		if (!this.checkAccess()) { return; }
		if ((!sTable) || (!this._gtTable.isValidTable(sTable)) || (!sField) || (!sValue)) {
			gs.warn('GlobalToolsRecordRead.checkRecordByField table or field or value is empty!');
			return;
		} // if table is empty
		var grRecord = new GlideRecord(sTable);
		if (grRecord.get(sField, sValue)) {
			return true;
		} // if found
	}, // function checkRecordByField

	getSysIdByQuery: function (sTable, sQuery, bUniqueOnly) {
		if (!this.checkAccess()) { return; }
		if ((!sTable) || (!this._gtTable.isValidTable(sTable)) || (!sQuery)) {
			gs.warn('GlobalToolsRecordRead.getSysIdByQuery table or query is empty!');
			return;
		} // if table is empty
		var grRecord = new GlideRecord(sTable);
		if (bUniqueOnly) {
			grRecord.setLimit(2);
		} else {
			grRecord.setLimit(1);
		} // if error on multiple
		grRecord.addEncodedQuery(sQuery);
		grRecord.query();
		if (grRecord._next()) {
			if ((bUniqueOnly) && (grRecord.getRowCount() > 1)) {
				return;
			} // if unique don't return value
			return grRecord.getUniqueValue();
		} // if found
	}, // function getSysIdByQuery

	checkRecordByQuery: function (sTable, sQuery) {
		if (!this.checkAccess()) { return; }
		if ((!sTable) || (!this._gtTable.isValidTable(sTable)) || (!sQuery)) {
			gs.warn('GlobalToolsRecordRead.checkRecordByQuery table or query is empty!');
			return;
		} // if table is empty
		var grRecord = new GlideRecord(sTable);
		grRecord.setLimit(1);
		grRecord.addEncodedQuery(sQuery);
		grRecord.query();
		if (grRecord._next()) {
			return true;
		} // if found
	}, // function checkRecordByQuery

	getRelatedRecordByKeys: function (oRecordConfig, oRecordValues, aError, oField, sRefTable, iArrayField) {
		if (!this.checkAccess()) { return; }
		var bLog = this._getValue('bLog', false, oRecordConfig);
		var sLogPrefix = (bLog) ? this._getValue('sLogPrefix', 'GlobalToolsRecordRead.getRelatedRecordByKeys ', oRecordConfig) : '';
		if (!oField) {
			aError.push('Field is empty!');
			if (bLog) {
				gs.warn(sLogPrefix + 'Field is empty! (oRecordConfig: + ' + JSON.stringify(oRecordConfig) + ' oRecordValues: ' + JSON.stringify(oRecordValues) + ')');
			} // if log
			return;
		} // if not field
		var oRecordConfigTmp = JSON.parse(JSON.stringify(oRecordConfig));
		var oRecordValuesTmp = JSON.parse(JSON.stringify(oRecordValues));
		var sField = '';
		var sTable = this._getValue('sTargetTable', '', oRecordConfig);
		var aKeys = [];
		if ((this._gtObject.isObject(oField)) && (oField.hasOwnProperty('sField'))) {
			sField = oField['sField'];
			aKeys = this._getValue('aKeys', ['sys_id'], oField);
			if (!this._isValidArray(aKeys)) {
				aKeys = [aKeys];
			} // if not array
		} else if ((oField) && (this._gt.getType(oField) == 'string')) {
			sField = oField;
			aKeys.push({ 'sInputField': sField, 'sTargetField': 'sys_id' });
		} else {
			aError.push('Invalid field type or field not defined!');
			if (bLog) {
				gs.warn(sLogPrefix + 'Invalid field type or field not defined! (oField: ' + JSON.stringify(oField) + ' type: ' + this._gt.getType(oField) + ' oRecordConfig: + ' + JSON.stringify(oRecordConfig) + ' oRecordValues: ' + JSON.stringify(oRecordValues) + ')');
			} // if log
			return;
		} // if field is obj
		aKeys.forEach(function (oKey, iIndex) {
			if (this._gtObject.isObject(oKey)) {
				if (!oKey.hasOwnProperty('sInputField')) {
					oKey['sInputField'] = sField;
				} // if no input field
			} else {
				aKeys[iIndex] = { 'sInputField': sField, 'sTargetField': aKeys[iIndex] };
			} // if key is obj
		}, this); // for each key
		sRefTable = (sRefTable) ? sRefTable : this._getValue('sRefTable', '', oField);
		sRefTable = (sRefTable) ? sRefTable : this._gtTable.getDictOrOverrideValue(sTable, sField, 'reference');
		oRecordConfigTmp['sTargetTable'] = sRefTable;
		oRecordConfigTmp['aKeys'] = aKeys;
		if (iArrayField) {
			oRecordValuesTmp[sField] = oRecordValuesTmp[sField][iArrayField];
		} // if array field
		var grRefRecord = this.getRecordByKeys(oRecordConfigTmp, oRecordValuesTmp, aError);
		if ((grRefRecord) && (this._gt.getType(grRefRecord).indexOf('gliderecord') != -1) && (grRefRecord.isValidRecord()) && (grRefRecord.getValue('sys_id'))) {
			return grRefRecord.getUniqueValue();
		} // if ref record
		return '';
	}, // function getRelatedRecordByKeys

	/*	Important configuration elements:
		1. oRecordConfig['sTargetTable']: table to lookup record
		2. oRecordConfig['aKeys']: array of keys to look for to identify record (first one that produces a result is taken)
			A key (string or object) or an array with key combinations (all must match) to uniquely identify a record
			2.1 'key_field': simple key field taking the value of the respective value field (fieldname in source body and target record are the same)
			2.2 array of key fields ['key_field_1', 'key_field_2'], key combinations (all must match) to uniquely identify a record

			If the input field is different from the target field or the target field is a dot walk field you can replace the string with an object that contains the following properties:
			{
				'sInputField': 'input_field', --> field from oRecordValues where the value is found
				'sTargetField': 'target_field', --> field in the sTargetTable record (can be a dot walk field like caller_id.email)
				'sAddlQuery': 'active=true', --> additional query to be applied to the target lookup
				'bQueryEmptyFields': 'true/false', --> if input_field is empty will add a query: input_fieldISEMPTY'
		3. oRecordConfig['bQueryEmptyFields'] // generic setting to query empty fields with ISEMPTY instead of returning an error for all empty fields
	*/
	getRecordByKeys: function (oRecordConfig, oRecordValues, aError) {
		if (!this.checkAccess()) { return; }
		var sTable = this._getValue('sTargetTable', '', oRecordConfig);
		var bLog = this._getValue('bLog', false, oRecordConfig);
		var sLogLevel = (bLog) ? this._getValue('sLogLevel', 'error', oRecordConfig) : '';
		var sLogPrefix = (bLog) ? this._getValue('sLogPrefix', 'GlobalToolsRecordRead.getRecordByKeys ', oRecordConfig) : '';
		if (!sTable) {
			aError.push('Table is empty!');
			if (bLog) {
				gs.warn(sLogPrefix + 'table is empty! (oRecordConfig: + ' + JSON.stringify(oRecordConfig) + ' oRecordValues: ' + JSON.stringify(oRecordValues) + ')');
			} // if log
			return;
		} // if table is empty
		var aAllKeys = this._getValue('aKeys', [], oRecordConfig);
		aAllKeys = (this._isValidArray(aAllKeys)) ? aAllKeys : ['sys_id'];
		var aKeys = [],
			aQuery = [],
			sKeyField = '',
			sTargetField = '',
			sTargetNonDotWalkField = '',
			sValue = '',
			sAddlQuery = '',
			bQueryEmptyFields = false;
		var grRecord = (this._getValue('bUseGlideRecordSecure', false, oRecordConfig) == true) ? new GlideRecordSecure(sTable) : new GlideRecord(sTable);
		if (this._getValue('bNoWorkflow', false, oRecordConfig) == true) {
			grRecord.setWorkflow(false);
		} // if no workflow
		if (this._getValue('bNoAutoSysFields', false, oRecordConfig) == true) {
			grRecord.autoSysFields(false);
		} // if no autosysfields
		//grRecord.initialize();
		aAllKeys.some(function (oAllKey) {
			grRecord.initialize();
			aQuery = [];
			aKeys = [];
			if (Array.isArray(oAllKey)) {
				aKeys = oAllKey;
			} else {
				aKeys.push(oAllKey);
			} // if array
			aKeys.forEach(function (oKey) {
				sKeyField = '';
				sTargetField = '';
				sTargetNonDotWalkField = '';
				sAddlQuery = '';
				bQueryEmptyFields = this._getValue('bQueryEmptyFields', false, oRecordConfig);
				if (this._gtObject.isObject(oKey)) {
					sKeyField = this._getValue('sInputField', '', oKey);
					sTargetField = this._getValue('sTargetField', '', oKey);
					sAddlQuery = this._getValue('sAddlQuery', '', oKey);
					bQueryEmptyFields = this._getValue('bQueryEmptyFields', bQueryEmptyFields, oKey);
				} else {
					sKeyField = oKey;
				} // if key is object
				sTargetField = (sTargetField) ? sTargetField : sKeyField;
				sTargetNonDotWalkField = (sTargetField.indexOf('.') != -1) ? sTargetField.split('.')[0] : sTargetField;
				sValue = this._getValue(sKeyField, '', oRecordValues);
				if (grRecord.isValidField(sTargetNonDotWalkField)) {
					if ((sValue == 'NULL') || ((!sValue) && (bQueryEmptyFields))) {
						aQuery.push(sTargetField + 'ISEMPTY' + sAddlQuery);
					} else if (sValue) {
						aQuery.push(sTargetField + '=' + sValue + sAddlQuery);
					} else {
						aError.push('Field \'' + sKeyField + '\' is empty and parameter bQueryEmptyFields is not set');
						if (bLog) {
							gs.warn(sLogPrefix + 'Key not found sKeyField \'' + sKeyField + '\' is empty and parameter bQueryEmptyFields is not set. (oRecordConfig: ' + JSON.stringify(oRecordConfig) + ' oRecordValues: ' + JSON.stringify(oRecordValues) + ')');
						} // if log
					} // if value
				} else {
					aError.push('Field ' + sTargetField + ' does not exist in table ' + sTable);
					gs.warn('GlobalToolsRecordRead.getRecordByKeys key not found sTable: ' + sTable + ' sTargetField: ' + sTargetField + ' (oRecordConfig: ' + JSON.stringify(oRecordConfig) + ' oRecordValues: ' + JSON.stringify(oRecordValues) + ')');
				} // if valid field
			}, this); // each key array
			if ((bLog) && (sLogLevel == 'debug')) {
				gs.debug(sLogPrefix + 'sTable: ' + sTable + ' oAllKey: ' + JSON.stringify(oAllKey) + ' sTargetField: ' + sTargetField + ' sTargetNonDotWalkField: ' + sTargetNonDotWalkField + ' sQuery: ' + aQuery.join('^') + ' aQuery len: ' + aQuery.length + ' aKeys len: ' + aKeys.length);
			} // if log
			if (aQuery.length == aKeys.length) { // only if all values are present
				grRecord.addEncodedQuery(aQuery.join('^'));
				if ((this._getValue('bNoDomain', false, oRecordConfig) == true)) {
					grRecord.queryNoDomain();
				} else {
					grRecord._query();
				} // no domain
				if (grRecord._next()) {
					return true;
				} // if record			
			} // if query matches keys
		}, this); // for each key object
		if ((grRecord.isValidRecord()) && (grRecord.sys_id != 'undefined')) {
			return grRecord;
		} // if valid record
	}, // function getRecordByKeys

	// Convert GlideRecord to JSON
	// grRecord: to be converted
	// bStringify: return JSON.stringify other wise JSON (default: JSON)
	// bDisplayValue: get Display Value (default: false)
	// bDisplayValueOwnField: get Display Value in own field with postfix "_dv" (default: false), otherwise return as: "value (display)"
	// Returns: JSON or String
	convertGRtoJSON: function (grRecord, bStringify, bDisplayValue, bDisplayValueOwnField) {
		if (!this.checkAccess()) { return; }
		if (this._gt.getType(grRecord).indexOf('gliderecord') == -1) {
			return;
		} // if not valid record
		var oResult = {},
			sValue = '',
			sDisplayValue = '';
		bDisplayValue = (bDisplayValue) ? bDisplayValue : false;
		bDisplayValueOwnField = (bDisplayValueOwnField) ? bDisplayValueOwnField : false;
		var aFields = this._gtTable.getFields(grRecord);
		aFields.forEach(function (sField) {
			sValue = grRecord.getValue(sField);
			if (bDisplayValue) {
				sDisplayValue = grRecord.getDisplayValue(sField);
				if (sValue != sDisplayValue) {
					if (bDisplayValueOwnField) {
						oResult[sField + '_dv'] = sDisplayValue;
					} else {
						sValue = sValue + ' (' + sDisplayValue + ')';
					} // if display own field
				} // if value != display
			} // if display value
			oResult[sField] = sValue;
		}, this); // each field
		if (bStringify) {
			return JSON.stringify(oResult);
		} else {
			return oResult;
		} // if stringify
	}, // function convertGRToJSON

	// Add dot walking field to a query
	makeQueryADotWalkQuery: function (sQuery, sDotWalkField) {
		if (!this.checkAccess()) { return; }
		if ((sQuery) && (sDotWalkField)) {
			var aQuery = [];
			var gqsQuery = new GlideQueryString('cmdb_ci', sQuery);
			gqsQuery.deserialize();
			var gqsTerms = gqsQuery.getTerms();
			for (var i = 0; i < gqsTerms.size(); i++) {
				var gqsTerm = gqsTerms.get(i);
				var sField = gqsTerm.getField();
				var sValue = gqsTerm.getValue();
				var sOperator = gqsTerm.getOperator();
				var sTermPrefix = '';
				if (gqsTerm.isOR()) {
					sTermPrefix = 'OR';
				} else if (gqsTerm.isNewQuery()) {
					sTermPrefix = 'NQ';
				} // if or or big or
				aQuery.push(sTermPrefix + sDotWalkField + '.' + sField + sOperator + sValue);
			} // each query string
			return aQuery.join('^');
		} // if params
	}, // function makeQueryADotWalkQuery

	// Combine Queries where the one of the queries can contain big or statements (^NQ)
	combineQueries: function (sFirstQuery, sSecondQuery) {
		if (!this.checkAccess()) { return; }
		if ((sFirstQuery) && (sSecondQuery)) {
			var bNQFirstQuery = (sFirstQuery.indexOf('^NQ') != -1);
			var bNQSecondQuery = (sSecondQuery.indexOf('^NQ') != -1);
			if ((bNQFirstQuery) && (bNQSecondQuery)) {
				gs.warn('GlobalToolsRecordRead.combineQueries is used with two big or statements in both queries! Return false! sFirstQuery: ' + sFirstQuery + ' sSecondQuery: ' + sSecondQuery);
				return 'false';
			} // if both queries contain big or
			var aResult = [];
			var aQueries = (bNQFirstQuery) ? sFirstQuery.split('^NQ') : sSecondQuery.split('^NQ');
			var sAddlQuery = (bNQFirstQuery) ? sSecondQuery : sFirstQuery;
			aQueries.forEach(function (sQuery) {
				aResult.push(sQuery + '^' + sAddlQuery);
			}, this); // each big or query
			return aResult.join('^NQ'); // join by big or query
		} else if ((sFirstQuery) && (!sSecondQuery)) {
			return sFirstQuery;
		} else if (sSecondQuery) {
			return sSecondQuery;
		} else {
			return '';
		} // if main query
	}, // function combineQueries	

	type: 'GlobalToolsRecordRead',
	version: '1.0.1',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-08-18 10:16:00</sys_created_on>
        <sys_id>2a51d52c1bb47150d5be777d8b4bcb25</sys_id>
        <sys_mod_count>92</sys_mod_count>
        <sys_name>GlobalToolsRecordRead</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_script_include_2a51d52c1bb47150d5be777d8b4bcb25</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2023-11-21 14:51:27</sys_updated_on>
    </sys_script_include>
</record_update>
